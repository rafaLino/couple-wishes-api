// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const changePassword = `-- name: ChangePassword :execresult
UPDATE users
SET password = $2
WHERE id = $1
`

type ChangePasswordParams struct {
	ID       int64
	Password []byte
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, changePassword, arg.ID, arg.Password)
}

const checkUserName = `-- name: CheckUserName :one
SELECT count(users.id) FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) CheckUserName(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRow(ctx, checkUserName, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCouple = `-- name: CreateCouple :one
INSERT INTO couples (
  user_id, partner_id
) VALUES (
  $1, $2
)
RETURNING id
`

type CreateCoupleParams struct {
	UserID    pgtype.Int8
	PartnerID pgtype.Int8
}

func (q *Queries) CreateCouple(ctx context.Context, arg CreateCoupleParams) (int64, error) {
	row := q.db.QueryRow(ctx, createCouple, arg.UserID, arg.PartnerID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, username, password, phone
) VALUES (
  $1, $2, $3, $4
)
RETURNING id
`

type CreateUserParams struct {
	Name     string
	Username string
	Password []byte
	Phone    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Username,
		arg.Password,
		arg.Phone,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createWish = `-- name: CreateWish :one
INSERT INTO wishes (
  title, description, url, price, completed, couple_id
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id
`

type CreateWishParams struct {
	Title       string
	Description pgtype.Text
	Url         pgtype.Text
	Price       pgtype.Text
	Completed   pgtype.Bool
	CoupleID    pgtype.Int8
}

func (q *Queries) CreateWish(ctx context.Context, arg CreateWishParams) (int64, error) {
	row := q.db.QueryRow(ctx, createWish,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.Price,
		arg.Completed,
		arg.CoupleID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteCouple = `-- name: DeleteCouple :exec
DELETE FROM couples
WHERE id = $1
`

func (q *Queries) DeleteCouple(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCouple, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteWish = `-- name: DeleteWish :exec
DELETE FROM wishes
WHERE id = $1
`

func (q *Queries) DeleteWish(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteWish, id)
	return err
}

const getPartnerName = `-- name: GetPartnerName :one
SELECT users.username AS username
FROM users
INNER JOIN couples
ON couples.id = $1
WHERE users.id != $2
LIMIT 1
`

type GetPartnerNameParams struct {
	ID   int64
	ID_2 int64
}

func (q *Queries) GetPartnerName(ctx context.Context, arg GetPartnerNameParams) (string, error) {
	row := q.db.QueryRow(ctx, getPartnerName, arg.ID, arg.ID_2)
	var username string
	err := row.Scan(&username)
	return username, err
}

const getUser = `-- name: GetUser :one
SELECT users.id, users.name, users.username, users.phone, couples.id as couple_id
FROM users
LEFT JOIN couples 
ON couples.user_id = users.id 
OR couples.partner_id = users.id
WHERE users.id = $1 LIMIT 1
`

type GetUserRow struct {
	ID       int64
	Name     string
	Username string
	Phone    string
	CoupleID pgtype.Int8
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Phone,
		&i.CoupleID,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT users.id, users.name, users.username, users.phone, couples.id as couple_id
FROM users
LEFT JOIN couples
ON couples.user_id = users.id
OR couples.partner_id = users.id
WHERE users.phone = $1 LIMIT 1
`

type GetUserByPhoneRow struct {
	ID       int64
	Name     string
	Username string
	Phone    string
	CoupleID pgtype.Int8
}

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (GetUserByPhoneRow, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phone)
	var i GetUserByPhoneRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Phone,
		&i.CoupleID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT users.id, users.name, users.username, users.phone, couples.id as couple_id
FROM users
LEFT JOIN couples
ON couples.user_id = users.id
OR couples.partner_id = users.id
WHERE users.username = $1 LIMIT 1
`

type GetUserByUsernameRow struct {
	ID       int64
	Name     string
	Username string
	Phone    string
	CoupleID pgtype.Int8
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Phone,
		&i.CoupleID,
	)
	return i, err
}

const getUserWithPassword = `-- name: GetUserWithPassword :one
SELECT users.id, users.name, users.username, users.password, users.phone, couples.id as couple_id FROM users
LEFT JOIN couples
ON couples.user_id = users.id
OR couples.partner_id = users.id
WHERE username = $1 LIMIT 1
`

type GetUserWithPasswordRow struct {
	ID       int64
	Name     string
	Username string
	Password []byte
	Phone    string
	CoupleID pgtype.Int8
}

func (q *Queries) GetUserWithPassword(ctx context.Context, username string) (GetUserWithPasswordRow, error) {
	row := q.db.QueryRow(ctx, getUserWithPassword, username)
	var i GetUserWithPasswordRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Phone,
		&i.CoupleID,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT users.id, users.name, users.username, users.phone, couples.id as couple_id
FROM users
LEFT JOIN couples
ON couples.user_id = users.id
OR couples.partner_id = users.id
`

type GetUsersRow struct {
	ID       int64
	Name     string
	Username string
	Phone    string
	CoupleID pgtype.Int8
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.Phone,
			&i.CoupleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWish = `-- name: GetWish :one
SELECT id, title, description, url, price, completed, couple_id, created_at FROM wishes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWish(ctx context.Context, id int64) (Wish, error) {
	row := q.db.QueryRow(ctx, getWish, id)
	var i Wish
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.Price,
		&i.Completed,
		&i.CoupleID,
		&i.CreatedAt,
	)
	return i, err
}

const getWishes = `-- name: GetWishes :many
SELECT id, title, description, url, price, completed, couple_id, created_at FROM wishes
WHERE couple_id = $1
ORDER BY created_at
`

func (q *Queries) GetWishes(ctx context.Context, coupleID pgtype.Int8) ([]Wish, error) {
	rows, err := q.db.Query(ctx, getWishes, coupleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wish
	for rows.Next() {
		var i Wish
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.Price,
			&i.Completed,
			&i.CoupleID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE users
SET name = $2
WHERE id = $1
`

type UpdateUserParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateUser, arg.ID, arg.Name)
}

const updateWish = `-- name: UpdateWish :execresult
UPDATE wishes
SET title = $2, description = $3, url = $4, price = $5, completed = $6
WHERE id = $1
`

type UpdateWishParams struct {
	ID          int64
	Title       string
	Description pgtype.Text
	Url         pgtype.Text
	Price       pgtype.Text
	Completed   pgtype.Bool
}

func (q *Queries) UpdateWish(ctx context.Context, arg UpdateWishParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateWish,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.Price,
		arg.Completed,
	)
}
